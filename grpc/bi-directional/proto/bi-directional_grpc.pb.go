// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bi-directional/proto/bi-directional.proto

package bi_directional

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiDirectionalServiceClient is the client API for BiDirectionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiDirectionalServiceClient interface {
	Communication(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalService_CommunicationClient, error)
}

type biDirectionalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiDirectionalServiceClient(cc grpc.ClientConnInterface) BiDirectionalServiceClient {
	return &biDirectionalServiceClient{cc}
}

func (c *biDirectionalServiceClient) Communication(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalService_CommunicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiDirectionalService_ServiceDesc.Streams[0], "/bidirectional.BiDirectionalService/Communication", opts...)
	if err != nil {
		return nil, err
	}
	x := &biDirectionalServiceCommunicationClient{stream}
	return x, nil
}

type BiDirectionalService_CommunicationClient interface {
	Send(*CommRequest) error
	Recv() (*CommResponse, error)
	grpc.ClientStream
}

type biDirectionalServiceCommunicationClient struct {
	grpc.ClientStream
}

func (x *biDirectionalServiceCommunicationClient) Send(m *CommRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biDirectionalServiceCommunicationClient) Recv() (*CommResponse, error) {
	m := new(CommResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectionalServiceServer is the server API for BiDirectionalService service.
// All implementations must embed UnimplementedBiDirectionalServiceServer
// for forward compatibility
type BiDirectionalServiceServer interface {
	Communication(BiDirectionalService_CommunicationServer) error
	mustEmbedUnimplementedBiDirectionalServiceServer()
}

// UnimplementedBiDirectionalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBiDirectionalServiceServer struct {
}

func (UnimplementedBiDirectionalServiceServer) Communication(BiDirectionalService_CommunicationServer) error {
	return status.Errorf(codes.Unimplemented, "method Communication not implemented")
}
func (UnimplementedBiDirectionalServiceServer) mustEmbedUnimplementedBiDirectionalServiceServer() {}

// UnsafeBiDirectionalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiDirectionalServiceServer will
// result in compilation errors.
type UnsafeBiDirectionalServiceServer interface {
	mustEmbedUnimplementedBiDirectionalServiceServer()
}

func RegisterBiDirectionalServiceServer(s grpc.ServiceRegistrar, srv BiDirectionalServiceServer) {
	s.RegisterService(&BiDirectionalService_ServiceDesc, srv)
}

func _BiDirectionalService_Communication_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiDirectionalServiceServer).Communication(&biDirectionalServiceCommunicationServer{stream})
}

type BiDirectionalService_CommunicationServer interface {
	Send(*CommResponse) error
	Recv() (*CommRequest, error)
	grpc.ServerStream
}

type biDirectionalServiceCommunicationServer struct {
	grpc.ServerStream
}

func (x *biDirectionalServiceCommunicationServer) Send(m *CommResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biDirectionalServiceCommunicationServer) Recv() (*CommRequest, error) {
	m := new(CommRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectionalService_ServiceDesc is the grpc.ServiceDesc for BiDirectionalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiDirectionalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidirectional.BiDirectionalService",
	HandlerType: (*BiDirectionalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communication",
			Handler:       _BiDirectionalService_Communication_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bi-directional/proto/bi-directional.proto",
}
