// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: server-streaming/proto/server-streaming.proto

package server_streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamingServiceClient is the client API for ServerStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamingServiceClient interface {
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (ServerStreamingService_LogsClient, error)
}

type serverStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamingServiceClient(cc grpc.ClientConnInterface) ServerStreamingServiceClient {
	return &serverStreamingServiceClient{cc}
}

func (c *serverStreamingServiceClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (ServerStreamingService_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStreamingService_ServiceDesc.Streams[0], "/server.streaming.ServerStreamingService/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamingServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamingService_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type serverStreamingServiceLogsClient struct {
	grpc.ClientStream
}

func (x *serverStreamingServiceLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamingServiceServer is the server API for ServerStreamingService service.
// All implementations must embed UnimplementedServerStreamingServiceServer
// for forward compatibility
type ServerStreamingServiceServer interface {
	Logs(*LogsRequest, ServerStreamingService_LogsServer) error
	mustEmbedUnimplementedServerStreamingServiceServer()
}

// UnimplementedServerStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamingServiceServer struct {
}

func (UnimplementedServerStreamingServiceServer) Logs(*LogsRequest, ServerStreamingService_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedServerStreamingServiceServer) mustEmbedUnimplementedServerStreamingServiceServer() {
}

// UnsafeServerStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamingServiceServer will
// result in compilation errors.
type UnsafeServerStreamingServiceServer interface {
	mustEmbedUnimplementedServerStreamingServiceServer()
}

func RegisterServerStreamingServiceServer(s grpc.ServiceRegistrar, srv ServerStreamingServiceServer) {
	s.RegisterService(&ServerStreamingService_ServiceDesc, srv)
}

func _ServerStreamingService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamingServiceServer).Logs(m, &serverStreamingServiceLogsServer{stream})
}

type ServerStreamingService_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type serverStreamingServiceLogsServer struct {
	grpc.ServerStream
}

func (x *serverStreamingServiceLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStreamingService_ServiceDesc is the grpc.ServiceDesc for ServerStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.streaming.ServerStreamingService",
	HandlerType: (*ServerStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _ServerStreamingService_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server-streaming/proto/server-streaming.proto",
}
