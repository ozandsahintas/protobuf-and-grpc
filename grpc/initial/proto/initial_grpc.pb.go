// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: initial/proto/initial.proto

package initial

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InitialServiceClient is the client API for InitialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitialServiceClient interface {
	Initial(ctx context.Context, in *InitialRequest, opts ...grpc.CallOption) (*InitialResponse, error)
}

type initialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitialServiceClient(cc grpc.ClientConnInterface) InitialServiceClient {
	return &initialServiceClient{cc}
}

func (c *initialServiceClient) Initial(ctx context.Context, in *InitialRequest, opts ...grpc.CallOption) (*InitialResponse, error) {
	out := new(InitialResponse)
	err := c.cc.Invoke(ctx, "/initial.InitialService/Initial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitialServiceServer is the server API for InitialService service.
// All implementations must embed UnimplementedInitialServiceServer
// for forward compatibility
type InitialServiceServer interface {
	Initial(context.Context, *InitialRequest) (*InitialResponse, error)
	mustEmbedUnimplementedInitialServiceServer()
}

// UnimplementedInitialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInitialServiceServer struct {
}

func (UnimplementedInitialServiceServer) Initial(context.Context, *InitialRequest) (*InitialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initial not implemented")
}
func (UnimplementedInitialServiceServer) mustEmbedUnimplementedInitialServiceServer() {}

// UnsafeInitialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitialServiceServer will
// result in compilation errors.
type UnsafeInitialServiceServer interface {
	mustEmbedUnimplementedInitialServiceServer()
}

func RegisterInitialServiceServer(s grpc.ServiceRegistrar, srv InitialServiceServer) {
	s.RegisterService(&InitialService_ServiceDesc, srv)
}

func _InitialService_Initial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitialServiceServer).Initial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initial.InitialService/Initial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitialServiceServer).Initial(ctx, req.(*InitialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InitialService_ServiceDesc is the grpc.ServiceDesc for InitialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "initial.InitialService",
	HandlerType: (*InitialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initial",
			Handler:    _InitialService_Initial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initial/proto/initial.proto",
}
